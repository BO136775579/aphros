#!/usr/bin/env python3

import h5py
import numpy as np
import sys
import cv2

me = "img2hdf"
def usg():
    sys.stderr.write("%s -i IMG -o HDF\n" % me)
    sys.exit(2)
input = output = None
while True:
    sys.argv.pop(0)
    if sys.argv and len(sys.argv[0]) > 1 and sys.argv[0][0] == '-':
        if sys.argv[0][1] == 'h':
            usg()
        elif sys.argv[0][1] == 'i':
            sys.argv.pop(0)
            input = sys.argv[0]
        elif sys.argv[0][1] == 'o':
            sys.argv.pop(0)
            output = sys.argv[0]
        else:
            sys.stderr.write("%s: unknown option '%s'\n" % (me, sys.argv[0]))
            sys.exit(2)
    else:
        break

if input == None:
    sys.stderr.write("%s: -i is not set\n" % me)
    sys.exit(2)
if output == None:
    sys.stderr.write("%s: -o is not set\n" % me)
    sys.exit(2)

u = cv2.imread(input, cv2.IMREAD_GRAYSCALE)
if u is None:
    sys.stderr.write("%s: fail to open image '%s'\n" % (me, input))
    sys.exit(2)

b = 16
p0 = (u.shape[0] + b - 1)//b*b - u.shape[0]
p1 = (u.shape[1] + b - 1)//b*b - u.shape[1]
u = cv2.copyMakeBorder(u, p0//2, p0 - p0//2, p1//2, p1 - p1//2, cv2.BORDER_DEFAULT)
u = u.astype(float)
lo = np.min(u)
hi = np.max(u)
u = (u - lo) / (hi - lo)
u[u < 0.01] = 0
u[u > 0.99] = 1
v = u[np.newaxis, :, :, np.newaxis]
o = h5py.File(output, 'w')
o.create_dataset('data', data=v)
o.close()    
